# This deployment implements two cloudflare tunnels.
# To get the credentials, install cloudflared on a debian shell,
# login to cloudflare with 'cloudflared tunnel login' and
# create the tunnel 'cloudflared tunnel create home-cluster-ingress'.
# Inside the ~/.cloudlfared folder there is the tunnel credentials file,
# create the two secrets and make them available in the cluster with
# kubectl create secret generic cloudflare-tunnel-carlotto/dudoleitor \
# --namespace kube-system --from-file=credentials.json=/path/to/file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared-carlotto
  annotations:
    field.cattle.io/description: Cloudflare tunnel
  namespace: kube-system
spec:
  replicas: 1
  strategy: 
    type: Recreate
  revisionHistoryLimit: 0  # Cleaning up all old replicasets
  selector: 
    matchLabels: 
     app: cloudflared-tunnel
     instance: carlotto
  template:
    metadata:
      labels:
        app: cloudflared-tunnel
        instance: carlotto
    spec:
      containers:
        - image: cloudflare/cloudflared:2024.11.0-amd64  # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation/
          imagePullPolicy: IfNotPresent
          name: cloudflared
          volumeMounts:
            - mountPath: /etc/cloudflared/config
              name: conf  # Needs to be created manually in longhorn
              readOnly: true
            - mountPath: /etc/cloudflared/creds
              name: creds
              readOnly: true
          args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          livenessProbe:
            httpGet:
              # Cloudflared has a /ready endpoint which returns 200 if and only if
              # it has an active connection to the edge.
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:  # Limiting resources is always better, adjust accordingly
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            runAsUser: 65387
            runAsGroup: 65387
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
        - name: conf
          configMap:
            name: cloudflared-conf
            items:
            - key: config.yaml
              path: config.yaml
        - name: creds  # Follow the notes to create this
          secret:
            secretName: cloudflare-tunnel-carlotto
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared-dudoleitor
  annotations:
    field.cattle.io/description: Cloudflare tunnel
  namespace: kube-system
spec:
  replicas: 1
  strategy: 
    type: Recreate
  revisionHistoryLimit: 0  # Cleaning up all old replicasets
  selector: 
    matchLabels: 
     app: cloudflared-tunnel
     instance: dudoleitor
  template:
    metadata:
      labels:
        app: cloudflared-tunnel
        instance: dudoleitor
    spec:
      containers:
        - image: cloudflare/cloudflared:2024.11.0-amd64  # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation/
          imagePullPolicy: IfNotPresent
          name: cloudflared
          volumeMounts:
            - mountPath: /etc/cloudflared/config
              name: conf  # Needs to be created manually in longhorn
              readOnly: true
            - mountPath: /etc/cloudflared/creds
              name: creds
              readOnly: true
          args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          livenessProbe:
            httpGet:
              # Cloudflared has a /ready endpoint which returns 200 if and only if
              # it has an active connection to the edge.
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:  # Limiting resources is always better, adjust accordingly
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            runAsUser: 65387
            runAsGroup: 65387
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
        - name: conf
          configMap:
            name: cloudflared-conf
            items:
            - key: config.yaml
              path: config.yaml
        - name: creds  # Follow the notes to create this
          secret:
            secretName: cloudflare-tunnel-dudoleitor
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared-conf
  namespace: kube-system
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: home-cluster-ingress
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    ingress:
    # This rule matches any traffic
    - service: https://traefik-external-cluster:443
    # Skipping TLS verification as k83 will present an internal certificate
      originRequest:
          noTLSVerify: true
